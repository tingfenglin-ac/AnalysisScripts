function Batch_motion_correct_shef (varargin)

% - Allows Sheffield Lab members to initially set motion correction parameters for a batch of files
% - Provides multiple methods for generating a reference frame
%   a)"Auto Average Seq": makes an average of the n most similar sequential frames
%   b)"Auto Average Frm": makes average of n most similar frames to a frame choosen by user (better)
%   c)"Manual Average": makes average of a range of frames choosen by user
%   d)"Single frame": uses a single frame choosen by user
%   e)"Mean of selected tiff": allows user to select a seperate tiff file and makes an average of a range of frames choosen by the user.
%       - if "e" is used, user can choose a-c on that image to make an average
% - Motion corrects each file with its corrosponding parameters
% - This script must be used with Tiffs generated by sbx2tif_shef and corrosponding functions

% FILE INPUT OPTIONS:
% 1) AS INPUT WHEN CALLING FUNCin tTION: Call function with input as a cell array containing the paths of each tiff or the tiff
%    filenames if they are all he working directory.
%    EXAMPLE: Batch_motion_correct_shef({'...path/first.tif', '...path/second.tiff', '...path/third.tif', ...})

% 2) INSERT PATHS/FILENAMES AS STRINGS INTO ARRAY CALLED "Tiffs" (line 19)
%    EXAMPLE: Tiffs = {'first.tif', 'second.tiff', 'third.tif', ... };
% 3) IF NEITHER 1 OR 2 ARE USED, user will be prompted to select files from explorer window one at a time.
%    Once all files are selected click "Cancel" in the explorer window

%% Uncomment and Fill in Tiffs Here:
%  Tiffs = {'first_Plain_1.tif'}; % Uncomment this line and insert filenames into array

%% Parse inputs (not needed until I add more possible inputs)

% ip=inputParser();
% ip.addParameter('Filenames',{});
%
% ip.parse(varargin{:});
% for j=fields(ip.Results)'
%     eval([j{1} '=ip.Results.' j{1} ';'])
% end

%% Select Tiff Files
Filenames = {};
if nargin < 1 && ~exist('Tiffs','var')
    filechk = 0;
    filenum = 0;
    while filechk == 0
        [F,D] = uigetfile('*.tif', 'Select Tiff File.  If no more to select, click "Cancel"', 'Multiselect', 'on');
        if isequal(F, 0)
            filechk = 1;
        else
            if iscell(F)
                for celln=1:length(F)
                CurFileDir = [D F{celln}];
                Filenames{filenum+1} = CurFileDir;
                filenum = filenum +1;
                end
            else
                CurFileDir = [D F];
                Filenames{filenum+1} = CurFileDir;
                filenum = filenum +1;
            end

            
            
        end
        
    end
elseif nargin < 1 && exist('Tiffs','var')
    Filenames = Tiffs;
elseif nargin == 1
    Filenames = varargin{1};
else
    error('Error finding tiffs. Please read script instructions for usable options');
end
%% Start batch

nfiles = numel(Filenames);
warning('off','all');
nframes = zeros(nfiles,1);
motcorr_crop_points = zeros(nfiles,4);
maxshift_x = zeros(nfiles,1);
maxshift_y = zeros(nfiles,1);
Image(nfiles).Still = [];
for n = 1:nfiles
    disp(['DEFINING PARAMETERS FOR ' Filenames{n}(1:end)])
    %% Get Number of Frames
    T = Tiff(Filenames{n});
    j = T.getTag('ImageDescription');
    k=strfind(j,'images=')+7;
    nframes(n)=str2double(j((1:find(j(k:end)==newline,1))+k-1));
    %% Set Motor Crop Points
    chk= 0;
    while chk == 0
        MC = input(['\n',Filenames{n},': Would you like to set the area to be used in motion correction?\nIf "N", full frame will be used. (Y/N) >> '],'s');
        if isequal(MC,'N') || isequal(MC,'n')
            width = T.getTag('ImageWidth');
            height = T.getTag('ImageLength');
            motcorr_crop_points(n,:) = [0 0 width+1 height+1];
            chk = 1;
        elseif isequal(MC,'Y') || isequal(MC,'y')
            [crop_points] = get_motcorr_points(Filenames{n},[1 0 0],nframes(n));
            motcorr_crop_points(n,:) = crop_points;
            chk = 1;
        else
            cprintf('Errors','ERROR: Answer not recognized.  Please try again!');
        end
        
    end
    
    %% Set Max Shifts
    chk = 0;
    while chk == 0
        
        SL = input(['\n',Filenames{n},': Would you like to set the XY shift limit?\nIf so, input the number of pixels now. \nIf not, press ENTER and follow instructions on popup display >> ']);
        if isempty(SL)
            temp = cell(2,1);
            [~,temp{:}] = get_motcorr_points(Filenames{n},[0 1 0],nframes(n));
            maxshift_x(n) = temp{1};
            maxshift_y(n) = temp{2};
            chk = 1;
            
        elseif isscalar(SL)
            maxshift_x(n) = SL;
            maxshift_y(n) = SL;
            chk = 1;
            
        else
            cprintf('Errors','ERROR: Answer not recognized.  Please try again!');
            chk=0;
        end
    end
    %% Set Still Frames
    
    chk = 0;
    while chk == 0
        SF = input(['\n',Filenames{n},': Select method for generating the reference frame.\nChoose one: a)Auto Average Seq  b)Auto Average Frm  c)Manual Average d)Single frame e)Mean of selected tiff >> '],'s');
        chunk = 5000;
        if isequal(SF,'A') || isequal(SF,'a')
            wind = input('How many frames would you like to average? >> ');
            meandiffs = zeros(round(nframes(n))-1,1);
            if nframes(n) > 5000
                start_i = 1;
                end_i = chunk;
                for c = 1:ceil(size(meandiffs,1)/chunk)
                    meandiffs(start_i:end_i-1)=...
                        mean(mean(abs(diff...
                        (load_tiffs_fast(Filenames{n},'nframes',nframes(n),'start_ind',start_i, 'end_ind', min(end_i,nframes(n))),[],3))));% Find the mean change in intensity between frames
                    start_i = start_i + chunk;
                    end_i = end_i + min(chunk,nframes(n)-start_i+1);
                end
            else
                meandiffs(1:end)=...
                    mean(mean(abs(diff...
                    (load_tiffs_fast(Filenames{n},'nframes',nframes(n)),[],3))));
            end
            
            [~,s]=min(movsum(meandiffs,wind,'Endpoints','discard'));
            Image(n).Still = (mean_image(Filenames{n}, 'start_ind', s, 'end_ind', s+wind-1));
            D = figure('NumberTitle', 'off', 'Name', ['Reference frame for ' Filenames{n}]);
            imshow(uint16(Image(n).Still), [min(min((Image(n).Still))) max(max((Image(n).Still)))]);
            sat = input('\nAre you satisfied with this reference frame?(Y/N) >> ','s');
            if isequal(sat,'Y') || isequal(sat,'y')
                chk = 1;
            else
                %                 close(D)
                chk = 0;
            end
            
        elseif isequal(SF,'B') || isequal(SF,'b')
            wind = input('How many frames would you like to average? >> ');
            comp = input('Which frame would you like to use for comparison >> ');
            refframe = load_tiffs_fast(Filenames{n},'nframes',nframes(n),'start_ind',comp, 'end_ind',comp);
            diffs = zeros(round(nframes(n)),1);
            
            if nframes(n) > 5000
                start_i = 1;
                end_i = chunk;
                for c = 1:ceil(size(diffs,1)/chunk)
                    diffs(start_i:end_i)=...
                        mean(mean(abs(load_tiffs_fast(Filenames{n},'nframes',nframes(n),'start_ind',start_i, 'end_ind', min(end_i,nframes(n)))-refframe)));% Find the mean change in intensity between frames
                    start_i = start_i + chunk;
                    end_i = end_i + min(chunk,nframes(n)-start_i+1);
                end
            else
                diffs(1:end)=...
                    mean(mean(abs(load_tiffs_fast(Filenames{n},'nframes',nframes(n))-refframe)));% Find the mean change in intensity between frames
            end
            [~, DInd] = sort(diffs);
            
            bestImg = zeros(size(refframe,1),size(refframe,2),30);
            for frame = 1:wind
                bestImg(:,:,frame) = load_tiffs_fast(Filenames{n},'nframes',nframes(n),'start_ind',DInd(frame), 'end_ind',DInd(frame));
            end
            
            Image(n).Still = mean(bestImg,3);
            D = figure('NumberTitle', 'off', 'Name', ['Reference frame for ' Filenames{n}]);
            imshow(uint16(Image(n).Still), [min(min((Image(n).Still))) max(max((Image(n).Still)))]);
            sat = input('\nAre you satisfied with this reference frame?(Y/N) >> ','s');
            if isequal(sat,'Y') || isequal(sat,'y')
                chk = 1;
            else
                %                 close(D)
                chk = 0;
            end
            
        elseif isequal(SF,'C') || isequal(SF,'c')
            MeanS = input('What is the first frame you want to average? >> ');
            MeanE = input('What is the last frame you want to average? >> ');
            D = figure('NumberTitle', 'off', 'Name', ['Reference frame for ' Filenames{n}]);
            Image(n).Still = (mean_image(Filenames{n}, 'start_ind', MeanS, 'end_ind', MeanE));
            imshow(uint16(Image(n).Still), [min(min((Image(n).Still))) max(max((Image(n).Still)))]);
            sat = input('\nAre you satisfied with this reference frame?(Y/N) >> ','s');
            if isequal(sat,'Y') || isequal(sat,'y')
                chk = 1;
            else
                %                 close(D)
                chk = 0;
            end
        elseif isequal(SF,'D') || isequal(SF,'d')
            Image(n).Still = input('Which frame would you like to be the reference frame?(enter frame number) >> ');
            D = figure('NumberTitle', 'off', 'Name', ['Reference frame for ' Filenames{n}]);
            [frame,~] = load_tiffs_fast(Filenames{n},'start_ind',Image(n).Still, 'end_ind',Image(n).Still);
            imshow(frame, [min(min((frame))) max(max((frame)))]);
            sat = input('\nAre you satisfied with this reference frame?(Y/N) >> ','s');
            if isequal(sat,'Y') || isequal(sat,'y')
                chk = 1;
            else
                %                 close(D)
                chk = 0;
            end
        elseif isequal(SF,'E') || isequal(SF,'e')
            [MF,MD] = uigetfile('*.tif', 'Select Reference Tiff File.');
            SF = input(['\n',[MD MF],': Select method for generating the reference frame.\nChoose one: a)Auto Average Seq  b)Auto Average Frm  c)Manual Average >> '],'s');
            %% Get Number of Frames
            TR = Tiff([MD MF]);
            j = TR.getTag('ImageDescription');
            k=strfind(j,'images=')+7;
            nframesR=str2double(j((1:find(j(k:end)==newline,1))+k-1));
            %% use selected method on seperate tiff
            if isequal(SF,'A') || isequal(SF,'a')
                wind = input('How many frames would you like to average? >> ');
                meandiffs = zeros(round(nframesR)-1,1);
                if nframesR > 5000
                    start_i = 1;
                    end_i = chunk;
                    for c = 1:ceil(size(meandiffs,1)/chunk)
                        meandiffs(start_i:end_i-1)=...
                            mean(mean(abs(diff...
                            (load_tiffs_fast([MD MF],'nframes',nframesR,'start_ind',start_i, 'end_ind', min(end_i,nframesR)),[],3))));% Find the mean change in intensity between frames
                        start_i = start_i + chunk;
                        end_i = end_i + min(chunk,nframesR-start_i+1);
                    end
                else
                    meandiffs(1:end)=...
                        mean(mean(abs(diff...
                        (load_tiffs_fast([MD MF],'nframes',nframesR),[],3))));
                end
                
                [~,s]=min(movsum(meandiffs,wind,'Endpoints','discard'));
                Image(n).Still = (mean_image([MD MF], 'start_ind', s, 'end_ind', s+wind-1));
                D = figure('NumberTitle', 'off', 'Name', ['Reference frame for ' Filenames{n}]);
                imshow(uint16(Image(n).Still), [min(min((Image(n).Still))) max(max((Image(n).Still)))]);
                sat = input('\nAre you satisfied with this reference frame?(Y/N) >> ','s');
                if isequal(sat,'Y') || isequal(sat,'y')
                    chk = 1;
                else
                    %                 close(D)
                    chk = 0;
                end
                
            elseif isequal(SF,'B') || isequal(SF,'b')
                wind = input('How many frames would you like to average? >> ');
                comp = input('Which frame would you like to use for comparison >> ');
                refframe = load_tiffs_fast([MD MF],'nframes',nframesR,'start_ind',comp, 'end_ind',comp);
                diffs = zeros(round(nframesR),1);
                
                if nframes(n) > 5000
                    start_i = 1;
                    end_i = chunk;
                    for c = 1:ceil(size(diffs,1)/chunk)
                        diffs(start_i:end_i)=...
                            mean(mean(abs(load_tiffs_fast([MD MF],'nframes',nframesR,'start_ind',start_i, 'end_ind', min(end_i,nframes(n)))-refframe)));% Find the mean change in intensity between frames
                        start_i = start_i + chunk;
                        end_i = end_i + min(chunk,nframesR-start_i+1);
                    end
                else
                    diffs(1:end)=...
                        mean(mean(abs(load_tiffs_fast([MD MF],'nframes',nframesR)-refframe)));% Find the mean change in intensity between frames
                end
                [~, DInd] = sort(diffs);
                
                bestImg = zeros(size(refframe,1),size(refframe,2),30);
                for frame = 1:wind
                    bestImg(:,:,frame) = load_tiffs_fast([MD MF],'nframes',nframesR,'start_ind',DInd(frame), 'end_ind',DInd(frame));
                end
                
                Image(n).Still = mean(bestImg,3);
                D = figure('NumberTitle', 'off', 'Name', ['Reference frame for ' Filenames{n}]);
                imshow(uint16(Image(n).Still), [min(min((Image(n).Still))) max(max((Image(n).Still)))]);
                sat = input('\nAre you satisfied with this reference frame?(Y/N) >> ','s');
                if isequal(sat,'Y') || isequal(sat,'y')
                    chk = 1;
                else
                    %                 close(D)
                    chk = 0;
                end
                
            elseif isequal(SF,'C') || isequal(SF,'c')
                MeanS = input('What is the first frame you want to average? >> ');
                MeanE = input('What is the last frame you want to average? >> ');
                D = figure('NumberTitle', 'off', 'Name', ['Reference frame for ' Filenames{n}]);
                Image(n).Still = (mean_image([MD MF], 'start_ind', MeanS, 'end_ind', MeanE));
                imshow(uint16(Image(n).Still), [min(min((Image(n).Still))) max(max((Image(n).Still)))]);
                sat = input('\nAre you satisfied with this reference frame?(Y/N) >> ','s');
                if isequal(sat,'Y') || isequal(sat,'y')
                    chk = 1;
                else
                    %                 close(D)
                    chk = 0;
                end
            end
            
        else
            cprintf('Errors','ERROR: Answer not recognized.  Please try again!');
        end
        close(D);
    end
end

%% Run Motion Correction Using Collected Parameters

for m = 1:nfiles
    
    motion_correct_shef(Filenames{m}, [Filenames{m}(1:end-4) '_MotCor.tif'],...
        'motcorr_crop_points',motcorr_crop_points(1,:),...
        'maxshift_x',maxshift_x(m),...
        'maxshift_y',maxshift_y(m),...
        'numframes', nframes(m),...
        'still_frame', Image(m).Still);
    
end

